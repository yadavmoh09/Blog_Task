<!DOCTYPE html>
<html>
  <head>
    
    <script src="https://cdn.jsdelivr.net/npm/tinymce@5/tinymce.min.js" referrerpolicy="origin"></script>
    <script>
        tinymce.init({
            selector: '#article',  // Change this value according to the ID of your textarea
            plugins: 'lists link image table code',
            toolbar: 'undo redo | bold italic underline | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image | code',
            menubar: false
        });
    </script>
    <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <style>
      body {
        font-family: Arial, Helvetica, sans-serif;
      }
      * {
        box-sizing: border-box;
      }

      fieldset {
        border: none;
        padding: 0;
      }

      legend {
        font-weight: bold;
        margin-bottom: 10px;
      }


      label {
        margin-left: 5px;
      }

      /* Full-width input fields */
      input[type="text"],
      input[type="password"] {
        width: 100%;
        padding: 15px;
        margin: 5px 0 22px 0;
        display: inline-block;
        border: none;
        background: #f1f1f1;
      }

      input[type="text"]:focus,
      input[type="password"]:focus {
        background-color: #ddd;
        outline: none;
      }

      hr {
        border: 1px solid #f1f1f1;
        margin-bottom: 25px;
      }

      /* Set a style for all buttons */
      button {
        background-color: #04aa6d;
        color: white;
        padding: 14px 20px;
        margin: 8px 0;
        border: none;
        cursor: pointer;
        width: 100%;
        opacity: 0.9;
      }

      button:hover {
        opacity: 1;
      }

      /* Extra styles for the cancel button */
      .loginbtn {
        padding: 14px 20px;
        background-color: #f44336;
      }

      /* Float cancel and signup buttons and add an equal width */
      .loginbtn,
      .signupbtn {
        float: left;
        width: 50%;
      }

      /* Add padding to container elements */
      .container {
        padding: 16px;
      }

      /* Clear floats */
      .clearfix::after {
        content: "";
        clear: both;
        display: table;
      }

      /* Change styles for cancel button and signup button on extra small screens */
      @media screen and (max-width: 300px) {
        .cancelbtn,
        .signupbtn {
          width: 100%;
        }
      }
      .tag-button{
            flex: 1 1 auto; 
            max-width: 200px;
            box-sizing: border-box; 
      }
        .button-container {
          display: flex;
            flex-wrap: wrap;
            gap: 3px;
        }
    </style>
  </head>
  <body>
    <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
      <div class="container-fluid">
        <a class="navbar-brand" href="#">
          <img
            src="https://www.w3schools.com/howto/img_avatar2.png"
            alt="Logo"
            style="width: 40px"
            class="rounded-pill"
          />
        </a>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
          <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
              <a class="nav-link" href="/post/getAllPost/home"
                >Home <span class="sr-only"></span
              ></a>
            </li>
            <li class="nav-item active">
              <a class="nav-link" href="/post/userPost/getResponse"
                >Personal Post <span class="sr-only"></span
              ></a>
            </li>
            <li class="nav-item active">
              <a class="nav-link" href="/post/userPost/getResponse"
                >Create Post <span class="sr-only"></span
              ></a>
            </li>
          </ul>
        </div>
      </div>
    </nav>
    <% if (locals.message) {%>
    <script>
      alert("<%= locals.message %>");
    </script>
    <% } %>
    <form
      action="/post/"
      method="POST"
      style="border: 1px solid #ccc"
    >
      <div class="container">
        <h1>Create New Post</h1>
        <hr />
        <label for="title"><b>Title</label>
            <input
            type="text"
            placeholder="Post title"
            name="title"
            required
          />
        <label for="username"><b>Write your post</label>
        <textarea id="article" name="text" rows="20" cols="80"></textarea
        ><br />
        <!-- <div class="mb-3"> 
            <label for="MultipleFile" 
                   class="form-label"> 
                   choose images 
            </label> 
            <input class="form-control" 
                   type="file" 
                   id="MultipleFile" accept="image/*" name="media_location" multiple /> 
        </div>  -->
        <label for="phone_number"><b>write or Pick your current location</b></label>
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Write location" id="location" name="location">
            <div class="input-group-btn">
              <button class="btn btn-default" type="button" onclick="getLocation()">
                <i class="glyphicon glyphicon-map-marker"></i>
              </button>
            </div>
          </div>

          <label for="articleTags"><b>Tags</b></label>
          <div class="input-group">
            <input type="text" class="form-control" placeholder="Enter tags separated by commas" id="articleTags" name="tags">
            <div class="input-group-btn">
              <button class="btn btn-primary" type="button" onclick="addTags()">
                Add
              </button>
            </div>
          </div>
          
        <div id="tagList" class="button-container">
            <!-- Tags will be displayed here -->
              </div>
        
        <div class="clearfix">
          <button type="button" class="loginbtn" id="loginbtn">cancel</button>
          <button type="submit" class="signupbtn">Post</button>
        </div>
      </div>
    </form>
    <script>
function addTags() {
            const tagInput = document.getElementById("articleTags");
            const tags = tagInput.value.split(",").map(tag => tag.trim());
            const tagList = document.getElementById("tagList");

            tagList.innerHTML = ""; // Clear previous tags
            let tagsValue = "";
            tags.forEach(tag => {
                if (tag !== "") {
                    const tagElement = document.createElement("button");
                    tagElement.classList="btn tag-button";
                    tagElement.disabled = true;
                    tagElement.textContent = "#"+tag;
                    tagsValue += "#"+tag;
                    tagList.appendChild(tagElement);
                    tagList.appendChild(document.createTextNode(" "));
                }
            });

            tagInput.value = tagsValue; // Clear input field
        }

        function getLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition, showError);
            } else {
                document.getElementById("location").innerText = "Geolocation is not supported by this browser.";
            }
        }

        function showPosition(position) {
            const latitude = position.coords.latitude;
            const longitude = position.coords.longitude;
            getAddress(latitude,longitude);
        }

        function showError(error) {
            switch(error.code) {
                case error.PERMISSION_DENIED:
                alert("User denied the request for Geolocation.");
                    break;
                case error.POSITION_UNAVAILABLE:
                alert("Location information is unavailable.");
                    break;
                case error.TIMEOUT:
                alert("The request to get user location timed out.");
                    break;
                case error.UNKNOWN_ERROR:
                alert("An unknown error occurred.");
                    break;
            }
        }
        function getAddress(latitude, longitude) {
            const apiKey = '73c084f55941443688822746eaaee84f'; 
                        const url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apiKey}`;

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    if (data.status.code === 200 && data.results.length > 0) {
                        const address = data.results[0].formatted;
                        document.getElementById("location").value = address;
                    } else {
                        alert('Geocode was not successful for the following reason: ' + data.status.message);
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>
  </body>
</html>
